#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <stdbool.h>
#define MAX_SIZE 100

int top = -1;
int stack[MAX_SIZE];


void push(int value) {
    if (top == MAX_SIZE - 1) {
        printf("Erro: Pilha cheia\n");
        exit(EXIT_FAILURE);
    }
    stack[++top] = value;
}

int pop() {
    if (top == -1) {
        printf("Erro: Pilha vazia\n");
        exit(EXIT_FAILURE);
    }
    return stack[top--];
}

int is_operator(char ch) {
    if (ch == '+' || ch == '-' || ch == '*' || ch == '/')
        return 1;
    return 0;
}

int precedence(char ch) {
    if (ch == '*' || ch == '/')
        return 2;
    if (ch == '+' || ch == '-')
        return 1;
    return 0;
}

char* infix_to_postfix(char* expression) {
    int i, j;
    char* postfix = (char*)malloc(sizeof(char) * strlen(expression));
    char ch;
    for (i = 0, j = 0; expression[i] != '\0'; i++) {
        ch = expression[i];
        if (isdigit(ch)) {
            postfix[j++] = ch;
            while (isdigit(expression[++i])) {
                postfix[j++] = expression[i];
            }
            postfix[j++] = ' '; // Adiciona espaço após o operando
            i--;
        }
        else if (ch == '(') {
            push(ch);
        }
        else if (ch == ')') {
            while (top != -1 && stack[top] != '(') {
                postfix[j++] = stack[top--];
                postfix[j++] = ' '; // Adiciona espaço após o operador
            }
            if (top == -1) {
                printf("Invalid expression!\n");
                exit(1);
            }
            top--;
        }
        else {
            while (top != -1 && precedence(ch) <= precedence(stack[top])) {
                postfix[j++] = stack[top--];
                postfix[j++] = ' '; // Adiciona espaço após o operador
            }
            push(ch);
        }
    }
    while (top != -1) {
        if (stack[top] == '(') {
            printf("Invalid expression!\n");
            exit(1);
        }
        postfix[j++] = stack[top--];
        postfix[j++] = ' '; // Adiciona espaço após o operador
    }
    postfix[j - 1] = '\0'; // Remove espaço em branco no final da string
    return postfix;
}

double evaluate_postfix_expression(char* expression) {
    int i;
    char ch;
    double val1, val2;
    for (i = 0; expression[i]; i++) {
        ch = expression[i];
        if (isalnum(ch))
            push(ch - '0');
        else {
            val2 = pop();
            val1 = pop();
            switch(ch) {
                case '+':
                    push(val1 + val2);
                    break;
                case '-':
                    push(val1 - val2);
                    break;
                case '*':
                    push(val1 * val2);
                    break;
                case '/':
                    push(val1 / val2);
                    break;
            }
        }
    }
    return stack[top];
}

int main() {
    char infix_expression[MAX_SIZE];
    printf("Digite a expressão: ");
    fgets(infix_expression, MAX_SIZE, stdin);
    char* postfix_expression = infix_to_postfix(infix_expression);
    printf("Expressão em NPR: %s\n", postfix_expression);
    double result = evaluate_postfix_expression(postfix_expression);
    printf("Resultado = %.2f\n", result);
    return 0;
}








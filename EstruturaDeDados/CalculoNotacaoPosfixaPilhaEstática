#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

// Definindo a estrutura da pilha
typedef struct {
    int top;
    double data[MAX_SIZE];
} Pilha;

// Função que adiciona um elemento à pilha
void push(Pilha *p, double value) {
    if (p->top < MAX_SIZE - 1) {
        p->top++;
        p->data[p->top] = value;
    } else {
        printf("Erro: Pilha cheia\n");
        exit(1);
    }
}

// Função que remove um elemento da pilha
double pop(Pilha *p) {
    if (p->top >= 0) {
        double value = p->data[p->top];
        p->top--;
        return value;
    } else {
        printf("Erro: Pilha vazia\n");
        exit(1);
    }
}

// Função que retorna o elemento do topo da pilha
double top(Pilha *p) {
    if (p->top >= 0) {
        return p->data[p->top];
    } else {
        printf("Erro: Pilha vazia\n");
        exit(1);
    }
}

int main() {
    char expressao[MAX_SIZE];
    double resultado, op1, op2;
    int i;
    Pilha pilha;

    // Inicializa a pilha
    pilha.top = -1;

    printf("Digite uma expressao posfixa: ");
    fgets(expressao, MAX_SIZE, stdin);

    // Calcula a expressao posfixa
    for (i = 0; expressao[i] != '\0'; i++) {
        if (expressao[i] >= '0' && expressao[i] <= '9') {
            // Se o caracter for um dígito, adiciona à pilha
            push(&pilha, (double) (expressao[i] - '0'));
        } else if (expressao[i] == '+' || expressao[i] == '-' || expressao[i] == '*' || expressao[i] == '/') {
            // Se o caracter for um operador, realiza a operação correspondente
            op2 = pop(&pilha);
            op1 = pop(&pilha);

            switch (expressao[i]) {
                case '+':
                    resultado = op1 + op2;
                    break;
                case '-':
                    resultado = op1 - op2;
                    break;
                case '*':
                    resultado = op1 * op2;
                    break;
                case '/':
                    resultado = op1 / op2;
                    break;
            }

            // Adiciona o resultado da operação à pilha
            push(&pilha, resultado);
        }
    }

    // Imprime o resultado final
    printf("Resultado: %.2f\n", top(&pilha));

    return 0;
}

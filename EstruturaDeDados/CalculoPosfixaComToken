#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <math.h>

#define MAX_STACK_SIZE 100

typedef struct {
    int top;
    double items[MAX_STACK_SIZE];
} Stack;

void push(Stack* stack, double value) {
    if (stack->top == MAX_STACK_SIZE - 1) {
        printf("Error: stack full\n");
        exit(EXIT_FAILURE);
    }
    stack->top++;
    stack->items[stack->top] = value;
}

double pop(Stack* stack) {
    if (stack->top == -1) {
        printf("Error: stack empty\n");
        exit(EXIT_FAILURE);
    }
    double value = stack->items[stack->top];
    stack->top--;
    return value;
}

double evaluate(char* expr) {
    Stack stack;
    stack.top = -1;
    double op1, op2, result;
    char *token = strtok(expr, " ");
    while (token != NULL) {
        if (isdigit(*token)) {
            push(&stack, atof(token));
        } else if (*token == '+') {
            op2 = pop(&stack);
            op1 = pop(&stack);
            result = op1 + op2;
            push(&stack, result);
        } else if (*token == '-') {
            op2 = pop(&stack);
            op1 = pop(&stack);
            result = op1 - op2;
            push(&stack, result);
        } else if (*token == '*') {
            op2 = pop(&stack);
            op1 = pop(&stack);
            result = op1 * op2;
            push(&stack, result);
        } else if (*token == '/') {
            op2 = pop(&stack);
            op1 = pop(&stack);
            if (op2 == 0) {
                printf("Error: division by zero\n");
                exit(EXIT_FAILURE);
            }
            result = op1 / op2;
            push(&stack, result);
        } else if (*token == '^') {
            op2 = pop(&stack);
            op1 = pop(&stack);
            result = pow(op1, op2);
            push(&stack, result);
        } else {
            printf("Error: invalid character '%c'\n", *token);
            exit(EXIT_FAILURE);
        }
        token = strtok(NULL, " ");
    }
    if (stack.top != 0) {
        printf("Error: invalid expression\n");
        exit(EXIT_FAILURE);
    }
    return stack.items[stack.top];
}

int main() {
    char expr[100];
    printf("Enter a postfix expression: ");
    fgets(expr, 100, stdin);
    double result = evaluate(expr);
    printf("Result: %lf\n", result);
    return 0;
}
